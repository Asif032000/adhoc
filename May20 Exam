//////////////////////////////////////////////
q1

adhochttpd.dockerfile :
 
 
 From centos
maintainer asif habib asif2000nm@gmail.com
run yum install httpd -y

run  mkdir /mycode
env  x=app1
copy beginner-html-site-styled /mycode/webapp1
copy project-html-website /mycode/webapp2
copy start.sh /mycode/start.sh
expose 80
run chmod +x /mycode/start.sh
entrypoint [ "/bin/bash","/mycode/start.sh" ]

//////

yml file


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: adhocpod1
  name: adhocpod1
spec:
  containers:
  - image: nginx
    name: adhocpod1
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

/////////

start.sh:



if [ $x == "app1" ]
then
        cp -rf /mycode/webapp1/* /var/www/html/
        httpd -DFOREGROUND
elif [ $x == "app2" ]
then
        cp -rf /mycode/webapp2/* /var/www/html/
        httpd -DFOREGROUND
else
        echo "No match"  > /var/www/html/index.html
        httpd -DFOREGROUND
fi



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
q2  

  
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    adhoc: asifq1
  name: adhocpod1
spec:
  containers:
  - image: nginx
    name: adhocpod1
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: adhocpod1
  name: q2svcasif
spec:
  ports:
  - name: "80"
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
          adhoc: asifq1
  type: NodePort
status:
  loadBalancer: {}
~                  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
q4
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: adhocrsasifq4
 labels:
  app: rsweb1  #  this is the label of RC not label of pods

spec:
 selector:
  matchLabels:
   adhoc: asifq4    # here alos label of pod
 replicas: 2  #  always one pod will be present even in case of current worker node failure
 template:
  metadata:
   name: mypodrs22  #  this will be the podname that will be created by RC
   labels:
    adhoc: asifq4
  spec:
   volumes:
   - name: xx1
     emptyDir: {}
   containers:
    - name: adhocasif
      image: asifhabib/may2020q1:v1
      volumeMounts:
      - name: xx1
        mountPath: /mnt/data
      ports:
       - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
   app: rsweb1
  name: q4svcasif
spec:
  ports:
  - name: "80"
    port: 80
    protocol: TCP


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
q7 


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
   adhoc: asifq7
  name: adhocpod7
spec:
  volumes:
   - name : asifvol
     emptyDir: {}

  containers:
  - image: alpine
    name: adhocpod7
    volumeMounts:
    - name: asifvol
      mountPath: /mnt/
    command: ["/bin/sh","-c","while true ; do date  >>/mnt/date.txt;sleep 3;done"]
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
q8:


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:   #  is important if you want your application can get the traffic from service 
   x: hello  # label always be in key: value pair and it must be unique 
  name: podexam1 # must be unique
spec:
  containers:
  - image: nginx
    name: pod1
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}


isme image pulling me error thi ek , baaki kaa pta ni chla.
